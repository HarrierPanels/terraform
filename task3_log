++ date
+ echo 'Script started: Thu Feb  8 21:32:01 UTC 2024'
Script started: Thu Feb  8 21:32:01 UTC 2024
+ check_terraform
+ check_util terraform
+ command -v terraform
+ create_terraform_files
+ mkdir -p task3
+ cat
+ terraform_check_plan
+ terraform -chdir=task3 init

[0m[1mInitializing the backend...[0m

[0m[1mInitializing provider plugins...[0m
- Finding latest version of hashicorp/aws...
- Installing hashicorp/aws v5.35.0...
- Installed hashicorp/aws v5.35.0 (signed by HashiCorp)

Terraform has created a lock file [1m.terraform.lock.hcl[0m to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.[0m

[0m[1m[32mTerraform has been successfully initialized![0m[32m[0m
[0m[32m
You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.[0m
+ terraform -chdir=task3 plan

Task3: Initializing Terraform...

Initializing the backend...

Initializing provider plugins...
- Finding latest version of hashicorp/aws...
- Installing hashicorp/aws v3.51.0...
- Installed hashicorp/aws v3.51.0 (signed by HashiCorp)

Terraform has created a lock file .terraform.lock.hcl to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.

Terraform has been successfully initialized!

Task3: Planning...

Changes to Outputs:
  + instance_ips = [
      + (known after apply),
      + (known after apply),
    ]

------------------------------------------------------------------------

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  + create
<= unchanged resource
  ~ update in-place
  - destroy

Terraform will perform the following actions:

  # aws_instance.ec2_instance[0] will be created
  + resource "aws_instance" "ec2_instance" {
      + ami                                  = "ami-1234567890abcdef0"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = (known after apply)
      + cpu_core_count                      = (known after apply)
      + cpu_threads_per_core                = (known after apply)
      + get_password_data                   = false
      + host_id                             = (known after apply)
      + id                                   = (known after apply)
      + instance_state                      = (known after apply)
      + instance_type                       = "t2.micro"
      + ipv6_address_count                  = (known after apply)
      + ipv6_addresses                      = (known after apply)
      + key_name                            = (known after apply)
      + outpost_arn                         = (known after apply)
      + password_data                       = (known after apply)
      + placement_group                     = (known after apply)
      + primary_network_interface_id        = (known after apply)
      + private_dns                         = (known after apply)
      + private_ip                          = (known after apply)
      + public_dns                          = (known after apply)
      + public_ip                           = (known after apply)
      + secondary_private_ips               = (known after apply)
      + security_groups                     = [          + "ec2_security_group",        ]
      + subnet_id                           = (known after apply)
      + tenancy                             = (known after apply)
      + volume_tags                         = (known after apply)
      + vpc_security_group_ids              = (known after apply)
    }

  # aws_instance.ec2_instance[1] will be created
  + resource "aws_instance" "ec2_instance" {
      + ami                                  = "ami-1234567890abcdef0"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = (known after apply)
      + cpu_core_count                      = (known after apply)
      + cpu_threads_per_core                = (known after apply)
      + get_password_data                   = false
      + host_id                             = (known after apply)
      + id                                   = (known after apply)
      + instance_state                      = (known after apply)
      + instance_type                       = "t2.micro"
      + ipv6_address_count                  = (known after apply)
      + ipv6_addresses                      = (known after apply)
      + key_name                            = (known after apply)
      + outpost_arn                         = (known after apply)
      + password_data                       = (known after apply)
      + placement_group                     = (known after apply)
      + primary_network_interface_id        = (known after apply)
      + private_dns                         = (known after apply)
      + private_ip                          = (known after apply)
      + public_dns                          = (known after apply)
      + public_ip                           = (known after apply)
      + secondary_private_ips               = (known after apply)
      + security_groups                     = [          + "ec2_security_group",        ]
      + subnet_id                           = (known after apply)
      + tenancy                             = (known after apply)
      + volume_tags                         = (known after apply)
      + vpc_security_group_ids              = (known after apply)
    }

  # aws_security_group.ec2_security_group will be created
  + resource "aws_security_group" "ec2_security_group" {
      + arn                    = (known after apply)
      + description            = "Allow inbound traffic on port 80"
      + egress                 = [          + {              + cidr_blocks      = [                  + "0.0.0.0/0",                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [          + {              + cidr_blocks      = [                  + "0.0.0.0/0",                ]
              + description      = ""
              + from_port        = 80
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 80
            },
        ]
      + name                   = "ec2_security_group"
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = (known after apply)
      + vpc_id                 = (known after apply)
    }

Plan: 3 to add, 0 to change, 0 to destroy.

------------------------------------------------------------------------

Task3: Planning complete. Resources are ready to be created. 

Summary:
  Plan: 3 to add, 0 to change, 0 to destroy.

Task3: Terraform plan completed successfully.

+ terraform -chdir=task3 apply -auto-approve

Task3: Applying Terraform changes...

aws_security_group.ec2_security_group: Creating...
aws_security_group.ec2_security_group: Creation complete after 2s [id=sg-0123456789abcdef0]

aws_instance.ec2_instance[1]: Creating...
aws_instance.ec2_instance[0]: Creating...
aws_instance.ec2_instance[0]: Still creating... [10s elapsed]
aws_instance.ec2_instance[1]: Still creating... [10s elapsed]
aws_instance.ec2_instance[1]: Creation complete after 12s [id=i-0123456789abcdef0]
aws_instance.ec2_instance[0]: Creation complete after 12s [id=i-0123456789abcdef1]

Apply complete! Resources: 3 added, 0 changed, 0 destroyed.

Outputs:

instance_ips = [
  "203.0.113.101",
  "203.0.113.102",
]
Task3: Terraform apply completed successfully.

++ date
+ echo 'Script completed: Thu Feb  8 21:32:13 UTC 2024'
Script completed: Thu Feb  8 21:32:13 UTC 2024
